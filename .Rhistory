FROM Students s, Domain d
WHERE (s.Form = d.Form) AND (s.Qnum = d.Qnum)
AND s.FORM = 'D'
ORDER BY StudentID")
result1 <- dbSendQuery(mydb, query1)
data1 <- fetch(result1, n=-1)
data1
library(RMySQL)
library(tidyverse)
library(vroom)
mydb <- dbConnect(MySQL(), user = 'stat226', password = 'cougars19', dbname = 'Stat226', host = 'statdb.byu.edu')
query1 <- paste("SELECT s.StudentID, s.Score, s.Form, d.Domain_num
FROM Students s, Domain d
WHERE (s.Form = d.Form) AND (s.Qnum = d.Qnum)
AND s.FORM = 'D'
ORDER BY StudentID")
result1 <- dbSendQuery(mydb, query1)
data1 <- fetch(result1, n=-1)
head(data1)
query <- "SELECT StudentID, SUM(Score) AS Total_Score, SUM(Score)/150
FROM Students
WHERE Form = 'D'
GROUP BY Student ID;"
query <- "SELECT StudentID, SUM(Score) AS Total_Score, SUM(Score)/150
FROM Students
WHERE Form = 'D'
GROUP BY StudentID;"
result <- dbSendQuery(mydb, query)
data <- fetch(result, n=-1)
head(data)
query <- "SELECT StudentID, SUM(Score) AS Total_Score, SUM(Score)/150 AS Percentage
FROM Students
WHERE Form = 'D'
GROUP BY StudentID;"
result <- dbSendQuery(mydb, query)
data <- fetch(result, n=-1)
head(data)
auto_grade <- function(newdata, column){
newdata$column <- 0
for (i in 1:nrow(newdata)) {
if (newdata$Percentage[i] >= 0.90) {
newdata$column[i] <- 'A'
} else if (newdata$Percentage[i] >= 0.80 & newdata$Percentage[i] < 0.90) {
newdata$column[i] <- 'B'
} else if (newdata$Percentage[i] >= 0.70 & newdata$Percentage[i] < 0.80) {
newdata$column[i] <- 'C'
} else if (newdata$Percentage[i] >= 0.60 & newdata$Percentage[i] < 0.70) {
newdata$column[i] <- 'D'
} else {
newdata$column[i] <- 'F'
}
}
}
head(data)
auto_grade <- function(newdata, column){
newdata$column <- 0
for (i in 1:nrow(newdata)) {
if (newdata$Percentage[i] >= 0.90) {
newdata$column[i] <- 'A'
} else if (newdata$Percentage[i] >= 0.80 & newdata$Percentage[i] < 0.90) {
newdata$column[i] <- 'B'
} else if (newdata$Percentage[i] >= 0.70 & newdata$Percentage[i] < 0.80) {
newdata$column[i] <- 'C'
} else if (newdata$Percentage[i] >= 0.60 & newdata$Percentage[i] < 0.70) {
newdata$column[i] <- 'D'
} else {
newdata$column[i] <- 'F'
}
}
}
head(data)
data <- auto_grade(data, Grade)
head(data)
data <- auto_grade(newdata = data, column = Grade)
head(data)
auto_grade <- function(input1, input2){
input1$input2 <- 0
for (i in 1:nrow(input1)) {
if (input1$Percentage[i] >= 0.90) {
newdata$input2[i] <- 'A'
} else if (input1$Percentage[i] >= 0.80 & input1$Percentage[i] < 0.90) {
input1$input2[i] <- 'B'
} else if (input1$Percentage[i] >= 0.70 & input1$Percentage[i] < 0.80) {
input1$input2[i] <- 'C'
} else if (input1$Percentage[i] >= 0.60 & input1$Percentage[i] < 0.70) {
input1$input2[i] <- 'D'
} else {
input1$input2[i] <- 'F'
}
}
}
auto_grade <- function(input1, input2){
input1$input2 <- 0
for (i in 1:nrow(input1)) {
if (input1$Percentage[i] >= 0.90) {
input1$input2[i] <- 'A'
} else if (input1$Percentage[i] >= 0.80 & input1$Percentage[i] < 0.90) {
input1$input2[i] <- 'B'
} else if (input1$Percentage[i] >= 0.70 & input1$Percentage[i] < 0.80) {
input1$input2[i] <- 'C'
} else if (input1$Percentage[i] >= 0.60 & input1$Percentage[i] < 0.70) {
input1$input2[i] <- 'D'
} else {
input1$input2[i] <- 'F'
}
}
}
data <- auto_grade(input1 = data, input2 = Grade)
query <- "SELECT StudentID, SUM(Score) AS Total_Score, SUM(Score)/150 AS Percentage
FROM Students
WHERE Form = 'D'
GROUP BY StudentID;"
result <- dbSendQuery(mydb, query)
data <- fetch(result, n=-1)
auto_grade <- function(input1, input2){
input1$input2 <- 0
for (i in 1:nrow(input1)) {
if (input1$Percentage[i] >= 0.90) {
input1$input2[i] <- 'A'
} else if (input1$Percentage[i] >= 0.80 & input1$Percentage[i] < 0.90) {
input1$input2[i] <- 'B'
} else if (input1$Percentage[i] >= 0.70 & input1$Percentage[i] < 0.80) {
input1$input2[i] <- 'C'
} else if (input1$Percentage[i] >= 0.60 & input1$Percentage[i] < 0.70) {
input1$input2[i] <- 'D'
} else {
input1$input2[i] <- 'F'
}
}
}
data <- auto_grade(input1 = data, input2 = Grade)
head(data)
result <- dbSendQuery(mydb, query)
data <- fetch(result, n=-1)
auto_grade <- function(input1, input2){
input1$input2 <- 0
for (i in 1:nrow(input1)) {
if (input1$Percentage[i] >= 0.90) {
input1$input2[i] <- 'A'
} else if (input1$Percentage[i] >= 0.80 & input1$Percentage[i] < 0.90) {
input1$input2[i] <- 'B'
} else if (input1$Percentage[i] >= 0.70 & input1$Percentage[i] < 0.80) {
input1$input2[i] <- 'C'
} else if (input1$Percentage[i] >= 0.60 & input1$Percentage[i] < 0.70) {
input1$input2[i] <- 'D'
} else {
input1$input2[i] <- 'F'
}
}
return(input1)
}
data <- auto_grade(input1 = data, input2 = Grade)
head(data)
result <- dbSendQuery(mydb, query)
data <- fetch(result, n=-1)
auto_grade <- function(input1, input2){
input1$input2 <- 0
for (i in 1:nrow(input1)) {
if (input1$Percentage[i] >= 0.90) {
input1$input2[i] <- 'A'
} else if (input1$Percentage[i] >= 0.80 & input1$Percentage[i] < 0.90) {
input1$input2[i] <- 'B'
} else if (input1$Percentage[i] >= 0.70 & input1$Percentage[i] < 0.80) {
input1$input2[i] <- 'C'
} else if (input1$Percentage[i] >= 0.60 & input1$Percentage[i] < 0.70) {
input1$input2[i] <- 'D'
} else {
input1$input2[i] <- 'F'
}
}
return(input1)
}
data <- auto_grade(data, Grade)
head(data)
result <- dbSendQuery(mydb, query)
data <- fetch(result, n=-1)
auto_grade <- function(table) {
table$Grade <- 0
for (i in 1:nrow(table)) {
if (table$Percentages[i] >= 0.90 & table$Percentages[i] <= 1.0) {
table$Grade[i] <- 'A'
} else if (table$Percentages[i] >= 0.80 & table$Percentages[i] < 0.90) {
table$Grade[i] <- 'B'
} else if (table$Percentages[i] >= 0.70 & table$Percentages[i] < 0.80) {
table$Grade[i] <- 'C'
} else if (table$Percentages[i] >= 0.60 & table$Percentages[i] < 0.70) {
table$Grade[i] <- 'D'
} else {
table$Grade[i] <- 'F'
}
}
return(table)
}
data <- auto_grade(data, Grade)
head(data)
result <- dbSendQuery(mydb, query)
data <- fetch(result, n=-1)
auto_grade <- function(table) {
table$Grade <- 0
for (i in 1:nrow(table)) {
if (table$Percentages[i] >= 0.90 & table$Percentages[i] <= 1.0) {
table$Grade[i] <- 'A'
} else if (table$Percentages[i] >= 0.80 & table$Percentages[i] < 0.90) {
table$Grade[i] <- 'B'
} else if (table$Percentages[i] >= 0.70 & table$Percentages[i] < 0.80) {
table$Grade[i] <- 'C'
} else if (table$Percentages[i] >= 0.60 & table$Percentages[i] < 0.70) {
table$Grade[i] <- 'D'
} else {
table$Grade[i] <- 'F'
}
}
return(table)
}
data <- auto_grade(data)
library(RMySQL)
library(tidyverse)
library(vroom)
query1 <- paste("SELECT s.StudentID, s.Score, s.Form, d.Domain_num
FROM Students s, Domain d
WHERE (s.Form = d.Form) AND (s.Qnum = d.Qnum)
AND s.FORM = 'D'
ORDER BY StudentID")
result1 <- dbSendQuery(mydb, query1)
data1 <- fetch(result1, n=-1)
query2 <- paste("SELECT s.StudentID, SUM(Score) AS Score, SUM(Score)/150 AS Percentages
FROM Students s, Domain d
WHERE (s.Form = d.Form) AND (s.Qnum = d.Qnum)
AND s.FORM = 'D'
GROUP BY s.StudentID")
result2 <- dbSendQuery(mydb, query2)
data2 <- fetch(result2, n=-1)
data2
auto_grade <- function(table) {
table$Grade <- 0
for (i in 1:nrow(table)) {
if (table$Percentages[i] >= 0.90 & table$Percentages[i] <= 1.0) {
table$Grade[i] <- 'A'
} else if (table$Percentages[i] >= 0.80 & table$Percentages[i] < 0.90) {
table$Grade[i] <- 'B'
} else if (table$Percentages[i] >= 0.70 & table$Percentages[i] < 0.80) {
table$Grade[i] <- 'C'
} else if (table$Percentages[i] >= 0.60 & table$Percentages[i] < 0.70) {
table$Grade[i] <- 'D'
} else {
table$Grade[i] <- 'F'
}
}
return(table)
}
# add letter grade column via auto_grade function
data2 <- auto_grade(data2)
head(data2)
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='Johnwilliams102', dbname='stats286_sqlfinal', host='localhost')
avg_grade = dbSendQuery(mydb,
"SELECT AVG(Percentages), STD(Percentages)
FROM Final_Results")
data = fetch(avg_grade, n=-1)
print(data)
mode_grade = dbSendQuery(mydb,
"SELECT Grade, Count(Grade)
FROM Final_Results
GROUP BY Grade
ORDER BY Count(Grade) DESC")
data = fetch(mode_grade, n=-1)
print(data)
# visualization
library(RMySQL)
library(tidyverse)
library(patchwork)
mydb <- dbConnect(MySQL(), user = 'root', password = 'Johnwilliams102',
dbname = 'stats286_sqlfinal', host = 'localhost')
result <- dbSendQuery(mydb, "select * from Final_Results")
data <- fetch(result, n=-1)
head(data)
plot1 <- data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
plot1
data$Grade <- factor(data$Grade, levels = c("A", "B", "C", "D", "F"))
plot1 <- data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
plot1
head(data)
data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
mydb <- dbConnect(MySQL(), user = 'root', password = 'Johnwilliams102',
dbname = 'stats286_sqlfinal', host = 'localhost')
result <- dbSendQuery(mydb, "select * from Final_Results")
data <- fetch(result, n=-1)
head(data)
data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
data$Grade <- factor(data$Grade, levels = c("A", "B", "C", "D", "F"))
data$Curved_Grade <- factor(data$Curved_Grade, levels = c("A", "B", "C", "D", "F"))
data$Grade <- factor(data$Grade, levels = c("A", "B", "C", "D", "F"))
data$Curved_Grade <- factor(data$Curved_Grade, levels = c("A", "B", "C", "D", "F"))
data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar()
data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
data %>%
ggplot(mapping = aes(Curved_Grade, fill = Curved_Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
plot1 + plot2
plot1 <- data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
plot2 <- data %>%
ggplot(mapping = aes(Curved_Grade, fill = Curved_Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
plot1 + plot2
(plot1 + plot2) / plo2
(plot1 + plot2) / plot2
(plot1 + plot2) / plot2 + plot1
(plot1 + plot2) / (plot2 + plot1)
both <- (plot1 + plot2)
(plot1 + plot2)
# Install and load the ggplot2 package if you haven't already
# install.packages("ggplot2")
library(ggplot2)
# Set seed for reproducibility
set.seed(123)
# Generate random data for two distributions
data <- data.frame(
value = c(rnorm(1000, mean = 0, sd = 1), rnorm(1000, mean = 1, sd = 1)),
distribution = rep(c("Distribution 1", "Distribution 2"), each = 1000)
)
# Create a histogram using ggplot2
ggplot(data, aes(x = value, fill = distribution)) +
geom_histogram(binwidth = 0.5, position = "identity", alpha = 0.7) +
labs(title = "Histogram of Two Distributions",
x = "Value",
y = "Frequency") +
scale_fill_manual(values = c("Distribution 1" = "blue", "Distribution 2" = "orange"))
# Generate random data for two distributions
data <- data.frame(
value = c(rnorm(1000, mean = 0, sd = 1), rnorm(1000, mean = 1, sd = 1)),
distribution = rep(c("Distribution 1", "Distribution 2"), each = 1000)
)
# Create a density plot using ggplot2
ggplot(data, aes(x = value, fill = distribution, color = distribution)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Two Distributions",
x = "Value",
y = "Density") +
scale_fill_manual(values = c("Distribution 1" = "blue", "Distribution 2" = "orange")) +
scale_color_manual(values = c("Distribution 1" = "blue", "Distribution 2" = "orange"))
# Create a density plot using ggplot2
ggplot(data, aes(x = value, fill = distribution, color = distribution)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Two Distributions",
x = "Value",
y = "Density") +
scale_color_manual(values = c("Distribution 1" = "blue", "Distribution 2" = "orange"))
# Set seed for reproducibility
set.seed(123)
# Generate random data for two distributions
data <- data.frame(
value = c(rnorm(1000, mean = 0, sd = 1), rnorm(1000, mean = 1, sd = 1)),
distribution = rep(c("Distribution 1", "Distribution 2"), each = 1000)
)
# Create a density plot using ggplot2 with colored lines
ggplot(data, aes(x = value, color = distribution)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Two Distributions",
x = "Value",
y = "Density") +
scale_color_manual(values = c("Distribution 1" = "blue", "Distribution 2" = "orange"))
# Generate random data for two distributions
data <- data.frame(
value = c(rnorm(1000, mean = 0, sd = 1), rnorm(1000, mean = 3, sd = 1)),
distribution = rep(c("Distribution 1", "Distribution 2"), each = 1000)
)
# Create a density plot using ggplot2 with colored lines
ggplot(data, aes(x = value, color = distribution)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Two Distributions",
x = "Value",
y = "Density") +
scale_color_manual(values = c("Distribution 1" = "blue", "Distribution 2" = "orange"))
# Generate random data for two distributions
data <- data.frame(
value = c(rnorm(1000, mean = 0, sd = 1), rnorm(1000, mean = 4, sd = 1)),
distribution = rep(c("Distribution 1", "Distribution 2"), each = 1000)
)
# Create a density plot using ggplot2 with colored lines
ggplot(data, aes(x = value, color = distribution)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Two Distributions",
x = "Value",
y = "Density") +
scale_color_manual(values = c("Distribution 1" = "blue", "Distribution 2" = "orange"))
# Create a density plot using ggplot2 with colored lines
ggplot(data, aes(x = value, color = distribution)) +
geom_density(alpha = 0.5) +
scale_color_manual(values = c("Distribution 1" = "blue", "Distribution 2" = "orange"))
# Create a density plot using ggplot2 with colored lines
ggplot(data, aes(x = value, color = distribution)) +
geom_density(alpha = 0.5, size = 1.5) +
scale_color_manual(values = c("Distribution 1" = "blue", "Distribution 2" = "orange"))
# Create a density plot using ggplot2 with colored lines
ggplot(data, aes(x = value, color = distribution)) +
geom_density(alpha = 0.5, size = 1) +
scale_color_manual(values = c("Distribution 1" = "blue", "Distribution 2" = "orange"))
# Generate random data for two distributions
data <- data.frame(
value = c(rnorm(1000, mean = 0, sd = 1), rnorm(1000, mean = 5, sd = 1)),
distribution = rep(c("Distribution 1", "Distribution 2"), each = 1000)
)
# Create a density plot using ggplot2 with colored lines
ggplot(data, aes(x = value, color = distribution)) +
geom_density(alpha = 0.5, size = 1) +
scale_color_manual(values = c("Distribution 1" = "blue", "Distribution 2" = "orange"))
# Create a density plot using ggplot2 with colored lines
ggplot(data, aes(x = value, color = distribution)) +
geom_density(alpha = 0.5, size = 0.8) +
scale_color_manual(values = c("Distribution 1" = "blue", "Distribution 2" = "orange"))
# Generate random data for two distributions
data <- data.frame(
value = c(rnorm(1000, mean = 0, sd = 2), rnorm(1000, mean = 4, sd = 2)),
distribution = rep(c("Distribution 1", "Distribution 2"), each = 1000)
)
# Create a density plot using ggplot2 with colored lines
ggplot(data, aes(x = value, color = distribution)) +
geom_density(alpha = 0.5, size = 0.8) +
scale_color_manual(values = c("Distribution 1" = "blue", "Distribution 2" = "orange"))
# Generate random data for two distributions
data <- data.frame(
value = c(rnorm(1000, mean = 0, sd = 2), rnorm(1000, mean = 5, sd = 2)),
distribution = rep(c("Distribution 1", "Distribution 2"), each = 1000)
)
# Create a density plot using ggplot2 with colored lines
ggplot(data, aes(x = value, color = distribution)) +
geom_density(alpha = 0.5, size = 0.8) +
scale_color_manual(values = c("Distribution 1" = "blue", "Distribution 2" = "orange"))
# Generate random data for two distributions
data <- data.frame(
value = c(rnorm(1000, mean = 0, sd = 2), rnorm(1000, mean = 5, sd = 2)),
distribution = rep(c("Distribution 1", "Distribution 2"), each = 1000)
)
# Create a density plot using ggplot2 with colored lines
ggplot(data, aes(x = value, color = distribution)) +
geom_density(alpha = 0.5, size = 0.8) +
scale_color_manual(values = c("Distribution 1" = "blue", "Distribution 2" = "orange"))
# load libraries
suppressMessages(library(tidyverse))
suppressMessages(library(tidymodels))
suppressMessages(library(vroom))
suppressMessages(library(corrplot))
suppressMessages(library(discrim)) # naive bayes
suppressMessages(library(embed)) # for target encoding
suppressMessages(library(themis)) # for balancing
library(stacks)
# load in data ------------------------------------------------------------
setwd("/Users/justinross/Documents/BYU/stat348/DontGetKicked")
train <- vroom("training.csv")
train[train == "NULL"] <- NA
# Create a bar plot using ggplot
ggplot(train, aes(x = factor(IsBadBuy))) +
geom_bar(fill = c("lightblue", "lightgreen"), color = "black") +
labs(title = "Bar Plot of IsBadBuy",
x = "IsBadBuy",
y = "Count") +
scale_x_discrete(labels = c("0", "1"))
# Create a bar plot using ggplot
ggplot(train, aes(x = factor(IsBadBuy))) +
geom_bar(fill = c("blue", "orange")) +
labs(title = "IsBadBuy Counts",
x = "IsBadBuy",
y = "Count") +
scale_x_discrete(labels = c("0", "1"))
# Create a bar plot using ggplot
ggplot(train, aes(x = factor(IsBadBuy))) +
geom_bar(fill = c("blue", "orange"), color = "black") +
labs(title = "IsBadBuy Counts",
x = "IsBadBuy",
y = "Count") +
scale_x_discrete(labels = c("0", "1"))
# Create a bar plot using ggplot
ggplot(train, aes(x = factor(IsBadBuy))) +
geom_bar(fill = c("blue", "orange"), color = "black") +
labs(title = "IsBadBuy Counts",
x = "IsBadBuy",
y = "Count") +
scale_x_discrete(labels = c("No", "Yes"))
# Create a bar plot using ggplot
ggplot(train, aes(x = factor(IsBadBuy))) +
geom_bar(fill = c("blue", "orange"), color = "black") +
labs(title = "IsBadBuy Counts",
x = "IsBadBuy",
y = "Count") +
scale_x_discrete(labels = c("No", "Yes")) +
theme(aspect.ratio = 1)
